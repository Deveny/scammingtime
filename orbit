
		<script>



			var camera, controls, scene, renderer;

			init();
			//render(); // remove when using next line for animation loop (requestAnimationFrame)
			animate();

			function init() {

				scene = new THREE.Scene();
				scene.fog = new THREE.FogExp2( 0xE1D3AF, 0.003 );

				renderer = new THREE.WebGLRenderer( { antialias: true , alpha: true} );
				//renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.set( 100, 0, 0 );

				// controls

				controls = new THREE.OrbitControls( camera, renderer.domElement );

				//controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)

				controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
				controls.dampingFactor = 0.05;

				controls.screenSpacePanning = false;

				controls.minDistance = -100;
				controls.maxDistance = 800;

                controls.maxPolarAngle = Math.PI / 2;

				// world

				var geometry = new THREE.CylinderGeometry( 0, 10, 30, 4, 1 );
				var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );

				for ( var i = 0; i < 500; i ++ ) {

					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.x = Math.random() * 1600 - 800;
					mesh.position.z = Math.random() * 1600 - 800;
					mesh.updateMatrix();
					mesh.matrixAutoUpdate = false;
					scene.add( mesh );

				}

				// lights

				var light = new THREE.DirectionalLight( 0xFFF3D4 );
				light.position.set( 1, 1, 1 );
				scene.add( light );

				var light = new THREE.DirectionalLight( 0x002288 );
				light.position.set( - 1, - 1, - 1 );
				scene.add( light );

				var light = new THREE.AmbientLight( 0x222222 );
				scene.add( light );

                
        addPointLight(0xff0000, new THREE.Vector3(-300, 0, 0), 'sl1');
        addPointLight(0x00ff00, new THREE.Vector3(-100, 0, 0), 'sl2');
        addPointLight(0xffffff, new THREE.Vector3(100, 0, 0), 'sl3');
        addPointLight(0x0000ff, new THREE.Vector3(300, 0, 0), 'sl4');
                control = new function () {


            this.count = 0.01;
        };
                
                //

				window.addEventListener( 'resize', onWindowResize, false );
                    //    addFloor();

       createGeometryFromMap();


			}
              function addPointLight(color, position, name) {
        var pointLight = new THREE.PointLight();
        pointLight.color = new THREE.Color(color);
        pointLight.intensity = 3;
        pointLight.distance = 60;

        pointLight.position.copy(position);
        pointLight.name = name;
        scene.add(pointLight);

        var bulbMat = new THREE.MeshBasicMaterial();
        bulbMat.color = new THREE.Color(color);
        pointLight.add(new THREE.Mesh(new THREE.SphereGeometry(0.1), bulbMat));
    }

              function createGeometryFromMap() {
        var depth = 512;
        var width = 512;

        var spacingX = 3;
        var spacingZ = 3;
        var heightOffset = 2;

        var canvas = document.createElement('canvas');
        canvas.width = 512;
        canvas.height = 512;
        var ctx = canvas.getContext('2d');

        var img = new Image();
        img.src = "../assets/kol.png";
        img.onload = function () {
            // draw on canvas
            ctx.drawImage(img, 0, 0);
            var pixel = ctx.getImageData(0, 0, width, depth);

            var geom = new THREE.Geometry;
            var output = [];
            for (var x = 0; x < depth; x++) {
                for (var z = 0; z < width; z++) {
                    // get pixel
                    // since we're grayscale, we only need one element

                    var yValue = pixel.data[z * 4 + (depth * x * 4)] / heightOffset;
                    var vertex = new THREE.Vector3(x * spacingX, yValue, z * spacingZ);
                    geom.vertices.push(vertex);
                }
            }

            // we create a rectangle between four vertices, and we do
            // that as two triangles.
            for (var z = 0; z < depth - 1; z++) {
                for (var x = 0; x < width - 1; x++) {
                    // we need to point to the position in the array
                    // a - - b
                    // |  x  |
                    // c - - d
                    var a = x + z * width;
                    var b = (x + 1) + (z * width);
                    var c = x + ((z + 1) * width);
                    var d = (x + 1) + ((z + 1) * width);

                    var face1 = new THREE.Face3(a, b, d);
                    var face2 = new THREE.Face3(d, c, a);

                    geom.faces.push(face1);
                    geom.faces.push(face2);
                }
            }

            geom.computeVertexNormals(true);
            geom.computeFaceNormals();
            geom.computeBoundingBox();

            var zMax = geom.boundingBox.max.z;
            var xMax = geom.boundingBox.max.x;

            var mesh = new THREE.Mesh(geom, new THREE.MeshLambertMaterial({
                vertexColors: THREE.FaceColors,
                color: 0xfff999,
                shading: THREE.NoShading
            }));
            mesh.translateX(-xMax / 2);
            mesh.translateZ(-zMax / 2);
            mesh.position.y=-50;
            scene.add(mesh);
            mesh.name = 'valley';
        };

    }

    function getHighPoint(geometry, face) {

        var v1 = geometry.vertices[face.a].y;
        var v2 = geometry.vertices[face.b].y;
        var v3 = geometry.vertices[face.c].y;

        return Math.max(v1, v2, v3);
    }
  function addFloor() {
        var floorGeometry = new THREE.PlaneGeometry(1600, 1600, 20, 20);
        var floorMaterial = new THREE.MeshPhongMaterial();
        floorMaterial.map = THREE.ImageUtils.loadTexture("../assets/textures/webtreats_metal_6-512px.jpg");

        floorMaterial.map.wrapS = floorMaterial.map.wrapT = THREE.RepeatWrapping;
        floorMaterial.map.repeat.set(20, 20);
        floorMaterial.side = THREE.DoubleSide;
        var floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);
        floorMesh.receiveShadow = true;
        floorMesh.rotation.x = -0.5 * Math.PI;
      floorMesh.position.y = -15;
        scene.add(floorMesh);
    }

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame( animate );

				controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true

				render();

			}

			function render() {

				renderer.render( scene, camera );
				var time = Date.now() * 0.00025;
				var d = 500;

        var light = scene.getObjectByName('sl1');
                
				light.position.x = Math.sin( time * 0.7 ) * d;
				light.position.z = Math.cos( time * 0.3 ) * d;
        var light = scene.getObjectByName('sl2');
        light.position.y = 15 * Math.sin((control.count += 0.005) + 0.5 * Math.PI);
        var light = scene.getObjectByName('sl3');
        light.position.y = 15 * Math.sin((control.count += 0.005) + 1.0 * Math.PI);
        var light = scene.getObjectByName('sl4');
        light.position.y = 15 * Math.sin((control.count += 0.005) + 1.5 * Math.PI);


			}

		</script>